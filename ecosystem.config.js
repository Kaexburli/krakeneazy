/* eslint-disable no-multi-str */
const path = require('path')

module.exports = {
  apps: [
    {
      name: 'prod-server',
      cwd: path.join(__dirname, 'backend'),
      script: 'server.js',
      interpreter: 'node',
      interpreter_args: '--es-module-specifier-resolution=node',
      watch: false,
      max_memory_restart: '3G',
      log: '/home/websitedev/krakeneazy.com/_log/app/pm2/backend.log',
      log_date_format: 'YYYY-MM-DD HH:mm Z',
      disable_logs: false,
      merge_logs: false,
      env: require('dotenv').config({ path: path.resolve('.env') }).parsed
    },
    {
      name: 'prod-client',
      cwd: path.join(__dirname, 'frontend'),
      script: 'npm',
      args: 'start',
      interpreter: 'node',
      interpreter_args: '--es-module-specifier-resolution=node',
      watch: false,
      max_memory_restart: '3G',
      log: '/home/websitedev/krakeneazy.com/_log/app/pm2/frontend.log',
      log_date_format: 'YYYY-MM-DD HH:mm Z',
      disable_logs: false,
      merge_logs: false,
      env: {
        NODE_ENV: 'production',
        COMMON_ENV_VAR: true,
        PORT: 5000
      }
    },
    {
      name: 'staging-server',
      cwd: path.join(__dirname, 'backend'),
      script: 'server.js',
      interpreter: 'node',
      interpreter_args: '--es-module-specifier-resolution=node',
      watch: true,
      max_memory_restart: '1G',
      log: '/home/websitedev/krakeneazy.com/_log/staging/pm2/backend.log',
      log_date_format: 'YYYY-MM-DD HH:mm Z',
      disable_logs: false,
      merge_logs: false,
      env: require('dotenv').config({ path: path.resolve('.env') }).parsed
    },
    {
      name: 'staging-client',
      cwd: path.join(__dirname, 'frontend'),
      script: 'npm',
      args: 'run staging',
      interpreter: 'node',
      interpreter_args: '--es-module-specifier-resolution=node',
      watch: true,
      max_memory_restart: '1G',
      log: '/home/websitedev/krakeneazy.com/_log/staging/pm2/frontend.log',
      log_date_format: 'YYYY-MM-DD HH:mm Z',
      disable_logs: false,
      merge_logs: false,
      env: {
        COMMON_ENV_VAR: true,
        NODE_ENV: 'production',
        ENVIRONMENT: 'production',
        SITE_NAME: 'Krakeneazy'
      }
    }
  ],
  deploy: {
    staging: {
      user: 'websitedev',
      host: ['212.227.212.129'],
      ssh_options: 'StrictHostKeyChecking=no',
      ref: 'origin/develop',
      repo: 'git@github.com:Kaexburli/krakeneazy.git',
      path: '/home/websitedev/krakeneazy.com/staging/deploy',
      'pre-setup': [
        'echo ' + '/'.repeat(50),
        'echo PRE-SETUP',
        'echo ' + '/'.repeat(50),
        'echo ---- pm2 flush staging-server && pm2 flush staging-server',
        'echo ---- pm2 flush staging-client && pm2 flush staging-client',
        'echo ---- pm2 delete staging-server && pm2 delete staging-server',
        'echo ---- pm2 delete staging-client && pm2 delete staging-client',
        'echo [KRAKENEAZY.COM]',
        'echo ---- cd krakeneazy.com/ && cd krakeneazy.com/',
        'echo ---- rm -vf _log/staging/nginx/access.log && rm -vf _log/staging/nginx/access.log',
        'echo ---- rm -vf _log/staging/nginx/error.log && rm -vf _log/staging/nginx/error.log',
        'echo ---- touch _log/staging/nginx/access.log && touch _log/staging/nginx/access.log',
        'echo ---- touch _log/staging/nginx/error.log && touch _log/staging/nginx/error.log',
        'echo ---- rm -vf _log/staging/pm2/* && rm -vf _log/staging/pm2/*',
        'echo ---- rm -vf _log/staging/pm2/* && rm -vf _log/staging/pm2/*',
        'echo [STAGING]',
        'echo ---- cd staging/ && cd staging/',
        'echo ---- rm -rf deploy && rm -rf deploy',
        'echo ---- rm -rf backend && rm -rf backend',
        'echo ---- rm -rf frontend && rm -rf frontend',
        'echo ---- rm -rf node_modules && rm -rf node_modules',
        'echo ---- rm -rf export && rm -rf export',
        'echo ---- rm -rf _error_pages && rm -rf _error_pages',
        "echo ---- rm !('.env') && rm !('.env')",
        'echo ---- mkdir deploy && mkdir deploy'
      ].join(';'),
      'post-setup': [
        'echo ' + '/'.repeat(50),
        'echo POST-SETUP',
        'echo ' + '/'.repeat(50),
        'echo [ROOT]',
        'echo ---- cd ../../ && cd ../../',
        'echo ---- mv deploy/current/* ./ && mv deploy/current/* ./',
        'echo ---- npm install && npm install',
        'echo ---- npm outdated && npm outdated',
        'echo [BACKEND]',
        'echo ---- cd backend && cd backend',
        'echo ---- npm install && npm install',
        'echo ---- npm outdated && npm outdated',
        'echo [FRONTEND]',
        'echo ---- cd ../frontend && cd ../frontend',
        'echo ---- npm install && npm install',
        'echo ---- npm outdated && npm outdated',
        'echo ---- npm run build && npm run build',
        'echo [MONGO]',
        // "echo 'db.dropDatabase()' | mongo krakeneazy_staging",
        'echo [PM2]',
        'echo ---- cd ../ && cd ../',
        "echo ---- pm2 startOrRestart ecosystem.config.js --only 'staging-server,staging-client' && pm2 startOrRestart ecosystem.config.js --only 'staging-server,staging-client'"
      ].join(';')
    },
    production: {
      user: 'websitedev',
      host: ['212.227.212.129'],
      ssh_options: 'StrictHostKeyChecking=no',
      ref: 'origin/main',
      repo: 'git@github.com:Kaexburli/krakeneazy.git',
      path: '/home/websitedev/krakeneazy.com/app/deploy',
      'pre-setup': [
        'echo ' + '/'.repeat(50),
        'echo PRE-SETUP',
        'echo ' + '/'.repeat(50),
        'echo [ROOT]',
        'echo npm install && npm install',
        'echo [KRAKENEAZY.COM]',
        'echo cd krakeneazy.com/  && cd krakeneazy.com/',
        'echo ---- rm -rf _error_pages && rm -rf _error_pages',
        'echo [APP]',
        'echo ---- cd app/ && cd app/',
        'echo ---- rm -rf deploy && rm -rf deploy',
        'echo ---- rm -rf backend && rm -rf backend',
        'echo ---- rm -rf frontend && rm -rf frontend',
        'echo ---- rm -rf node_modules && rm -rf node_modules',
        "echo ---- rm !('.env') && rm !('.env')",
        'echo ---- mkdir deploy && mkdir deploy'
      ].join(';'),
      'post-setup': [
        'echo [ROOT]',
        'echo ---- cd ../../ && cd ../../',
        'echo ---- mv deploy/current/* ./ && mv deploy/current/* ./',
        'echo ---- npm install && npm install',
        'echo ---- npm outdated && npm outdated',
        'echo ---- mv _error_pages ../ && mv _error_pages ../',
        "echo ---- rm !('.env'|'smtp.env.mjs'|'ecosystem.config.js'|'backend'|'frontend'|'deploy'|'package.json') && rm !('.env'|'smtp.env.mjs'|'ecosystem.config.js'|'backend'|'frontend'|'deploy'|'package.json')",
        'echo [BACKEND]',
        'echo ---- cd backend && cd backend',
        'echo ---- npm install && npm install',
        'echo ---- npm outdated && npm outdated',
        'echo [FRONTEND]',
        'echo ---- cd ../frontend && cd ../frontend',
        'echo ---- npm install && npm install',
        'echo ---- npm outdated && npm outdated',
        'echo ---- npm run build && npm run build',
        'echo ---- rm -rf src && rm -rf src',
        'echo [APP]',
        'echo ---- cd ../ && cd ../',
        'echo ---- rm -rf deploy && rm -rf deploy',
        'echo [PM2]',
        'echo ---- pm2 flush prod-server && pm2 flush prod-server',
        'echo ---- pm2 flush prod-client && pm2 flush prod-client',
        "echo ---- pm2 startOrRestart ecosystem.config.js --env production --only 'prod-server, prod-client' && pm2 startOrRestart ecosystem.config.js --env production --only 'prod-server, prod-client'"
      ].join(';')
    }
  }
}
